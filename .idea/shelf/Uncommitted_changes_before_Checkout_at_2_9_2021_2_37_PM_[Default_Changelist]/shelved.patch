Index: app/src/main/java/com/nima/tmdb/ui/fragments/MovieListFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nima.tmdb.ui.fragments\r\n\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport androidx.appcompat.widget.SearchView\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.nima.tmdb.R\r\nimport com.nima.tmdb.adapters.MovieListAdapter\r\nimport com.nima.tmdb.models.Example\r\nimport com.nima.tmdb.models.Result\r\nimport com.nima.tmdb.requests.wrapper.ApiWrapper\r\nimport com.nima.tmdb.ui.uiHelpers.ErrorAdapter\r\nimport com.nima.tmdb.utils.Constants\r\nimport com.nima.tmdb.utils.Constants.API_KEY\r\nimport com.nima.tmdb.utils.Constants.DEFAULT_ADULT\r\nimport com.nima.tmdb.utils.Constants.DEFAULT_LANGUAGE\r\nimport com.nima.tmdb.utils.TopSpacingItemDecoration\r\nimport com.nima.tmdb.viewModels.MovieListViewModel\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport kotlinx.android.synthetic.main.fragment_movie_list.*\r\nimport java.util.*\r\n\r\n@Suppress(\"NAME_SHADOWING\")\r\n@AndroidEntryPoint\r\nclass MovieListFragment : Fragment(R.layout.fragment_movie_list), MovieListAdapter.Interaction,\r\n    ErrorAdapter.TryAgain {\r\n\r\n    private val TAG = \"MovieListFragment\"\r\n    private var firstTime = true\r\n\r\n    private val viewModel: MovieListViewModel by viewModels()\r\n\r\n    private lateinit var movieListAdapter: MovieListAdapter\r\n    private lateinit var errorAdapter: ErrorAdapter\r\n    private lateinit var searchView: SearchView\r\n\r\n    private var _query: String? = null\r\n    private var recyclerView: RecyclerView? = null\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        initViewItems()\r\n        initRecyclerView()\r\n        subscribeOnSearchView()\r\n        subscribeOnMovieListObserver()\r\n        loadFirstPage()\r\n    }\r\n\r\n    private fun initViewItems() {\r\n        recyclerView = view?.findViewById(R.id.recycler_view)\r\n        searchView = view?.findViewById(R.id.search_view)!!\r\n    }\r\n\r\n    private fun subscribeOnSearchView() {\r\n        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\r\n            override fun onQueryTextSubmit(query: String): Boolean {\r\n                _query = query\r\n                searchMovieAPI(query, 1, false)\r\n                return false\r\n            }\r\n\r\n            override fun onQueryTextChange(newText: String): Boolean {\r\n                return false\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun subscribeOnMovieListObserver() {\r\n        viewModel.movieList.observe(viewLifecycleOwner){response ->\r\n            when(response){\r\n                is ApiWrapper.Success ->handleSuccessData(response.data)\r\n                is ApiWrapper.ApiError -> {\r\n                    handleErrorData(response.message)\r\n                    Log.d(TAG, \"subscribeOnMovieListObserver: ${response.totalError}\")\r\n                }\r\n                is ApiWrapper.NetworkError -> {\r\n                    handleErrorData(response.message)\r\n                    Log.d(TAG, \"subscribeOnMovieListObserver: ${response.message}\")\r\n                }\r\n                is ApiWrapper.UnknownError -> {\r\n                    handleErrorData(response.message)\r\n                    Log.d(TAG, \"subscribeOnMovieListObserver: ${response.message}\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun handleLoadingData() {\r\n        Log.d(TAG, \"handleLoadingData: isLoading...\")\r\n    }\r\n\r\n    private fun handleErrorData(message: String?) {\r\n        recycler_view.apply {\r\n            errorAdapter = ErrorAdapter(this@MovieListFragment)\r\n            layoutManager = LinearLayoutManager(activity)\r\n            adapter = errorAdapter\r\n        }\r\n        message?.let { error ->\r\n\r\n            showToastMessage(error)\r\n        }\r\n    }\r\n\r\n    private fun showToastMessage(error: String) {\r\n        Log.d(TAG, \"handleErrorData: $error\")\r\n        Toast.makeText(context, \"Cant Connect To The Server!!\", Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n    private fun handleSuccessData(data: Example?) {\r\n        initRecyclerView()\r\n        data?.let { example ->\r\n            example.results?.let { movieListAdapter.submitList(it) }\r\n        }\r\n    }\r\n\r\n    private fun initRecyclerView() {\r\n        val topSpacingItemDecoration = TopSpacingItemDecoration(padding = Constants.PADDING)\r\n        recycler_view.apply {\r\n            layoutManager = LinearLayoutManager(activity)\r\n            addItemDecoration(topSpacingItemDecoration)\r\n            movieListAdapter = MovieListAdapter(this@MovieListFragment)\r\n            adapter = movieListAdapter\r\n        }\r\n    }\r\n\r\n    private fun searchMovieAPI(query: String = \"\", page: Int = 1, onResume: Boolean) {\r\n        if (onResume) loadFirstPage() else {\r\n            viewModel.setMovie(\r\n                API_KEY,\r\n                DEFAULT_LANGUAGE,\r\n                query,\r\n                page,\r\n                DEFAULT_ADULT\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun loadFirstPage() {\r\n        val random = Random()\r\n        val number = random.nextInt(9)\r\n        Log.d(TAG, \"RandomNumber: $number\")\r\n        viewModel.setMovie(\r\n            API_KEY,\r\n            DEFAULT_LANGUAGE,\r\n            Constants.DEFAULT_MOVIE_LIST_NAME[number],\r\n            Constants.DEFAULT_PAGE,\r\n            DEFAULT_ADULT\r\n        )\r\n    }\r\n\r\n    override fun onItemSelected(position: Int, item: Result) {\r\n        item.id?.let { id ->\r\n            val bundle = Bundle()\r\n            bundle.putInt(\"movieID\", id)\r\n            findNavController().navigate(\r\n                R.id.action_movieListFragment_to_movieDetailsFragment,\r\n                bundle\r\n            )\r\n            Log.d(TAG, \"onItemSelected: $position\")\r\n        }\r\n    }\r\n\r\n    override fun onClick() {\r\n        _query?.let {\r\n            searchMovieAPI(it, 1, false)\r\n            Log.d(TAG, \"onClick: searching for $_query\")\r\n        } ?: let {\r\n            loadFirstPage()\r\n            Log.d(TAG, \"onClick: loading first page\")\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nima/tmdb/ui/fragments/MovieListFragment.kt	(revision 2ac452890dd86f806e7dd7819264385ed72ed5fb)
+++ app/src/main/java/com/nima/tmdb/ui/fragments/MovieListFragment.kt	(date 1612868302678)
@@ -32,7 +32,6 @@
     ErrorAdapter.TryAgain {
 
     private val TAG = "MovieListFragment"
-    private var firstTime = true
 
     private val viewModel: MovieListViewModel by viewModels()
 
