Index: app/src/main/java/com/nima/tmdb/ui/fragments/MainPageFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nima.tmdb.ui.fragments\r\n\r\nimport android.animation.ValueAnimator\r\nimport android.content.SharedPreferences\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.view.animation.LinearInterpolator\r\nimport android.widget.Button\r\nimport androidx.core.animation.doOnEnd\r\nimport androidx.core.view.isVisible\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.nima.tmdb.R\r\nimport com.nima.tmdb.models.login.LoginResponse\r\nimport com.nima.tmdb.models.login.RequestToken\r\nimport com.nima.tmdb.models.login.Session\r\nimport com.nima.tmdb.requests.wrapper.ApiWrapper\r\nimport com.nima.tmdb.utils.Constants.API_KEY\r\nimport com.nima.tmdb.utils.toast\r\nimport com.nima.tmdb.viewModels.AuthenticationViewModel\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport kotlinx.android.synthetic.main.fragment_main_page.*\r\nimport javax.inject.Inject\r\n\r\n\r\n@AndroidEntryPoint\r\nclass MainPageFragment : Fragment(R.layout.fragment_main_page) {\r\n\r\n    @Inject\r\n    lateinit var pref: SharedPreferences\r\n\r\n    private val TAG: String = \"MainPageFragment\"\r\n    lateinit var animationButton : Button\r\n    var duration = 1000L\r\n\r\n    private val viewModel: AuthenticationViewModel by viewModels()\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        getToken()\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        subscribeOnViewItems()\r\n        animate()\r\n        subscribeOnTokenObserver()\r\n        subscribeOnLoginObserver()\r\n        subscribeOnSessionId()\r\n    }\r\n\r\n    private fun subscribeOnViewItems() {\r\n        animationButton = view?.findViewById(R.id.btn_mainPageF_animation)!!\r\n        btn_mainPageF_tryAgain.setOnClickListener {\r\n            animate()\r\n            showErrorView(false)\r\n            getToken()\r\n        }\r\n    }\r\n\r\n    private fun getToken() {\r\n        viewModel.getToken(API_KEY)\r\n    }\r\n\r\n    private fun subscribeOnTokenObserver() {\r\n        viewModel.getToken.observe(viewLifecycleOwner) { response ->\r\n            when (response) {\r\n                is ApiWrapper.Success -> handleLogin(response.data?.requestToken)\r\n                is ApiWrapper.ApiError -> handleApiError(response.totalError)\r\n                is ApiWrapper.NetworkError -> handleNetError(response.message)\r\n                is ApiWrapper.UnknownError -> handleUnKnowError(response.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun subscribeOnLoginObserver() {\r\n        viewModel.login.observe(viewLifecycleOwner) { response ->\r\n            when (response) {\r\n                is ApiWrapper.Success -> handleSuccessLogin(response.data)\r\n                is ApiWrapper.ApiError -> handleApiError(response.message)\r\n                is ApiWrapper.NetworkError -> handleNetError(response.message)\r\n                is ApiWrapper.UnknownError -> handleUnKnowError(response.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun subscribeOnSessionId() {\r\n        viewModel.sessionId.observe(viewLifecycleOwner) { response ->\r\n            when (response) {\r\n                is ApiWrapper.Success -> handelSuccessSession(response.data)\r\n                is ApiWrapper.ApiError -> handleApiError(response.totalError)\r\n                is ApiWrapper.NetworkError -> handleNetError(response.message)\r\n                is ApiWrapper.UnknownError -> handleUnKnowError(response.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun handleSuccessLogin(data: LoginResponse?) {\r\n        data?.let {\r\n            val requestToken = it.requestToken?.let { it1 -> RequestToken(it1) }\r\n            requestToken?.let { it1 -> viewModel.getSessionId(it1, API_KEY) }\r\n        }\r\n    }\r\n\r\n    private fun handleLogin(requestToken: String?) {\r\n        requestToken?.let {\r\n            val userName = pref.getString(R.string.username.toString(), \"\")\r\n            val password = pref.getString(R.string.password.toString(), \"\")\r\n            if (userName?.isNotEmpty() == true && password?.isNotEmpty() == true) {\r\n                viewModel.login(userName, password, requestToken, API_KEY)\r\n            } else {\r\n                val bundle = Bundle()\r\n                bundle.putString(R.string.requestToken.toString(), requestToken)\r\n                findNavController().navigate(R.id.action_mainPageFragment_to_loginFragment, bundle)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun handelSuccessSession(data: Session?) {\r\n        data?.sessionId?.let {\r\n            if (it.isNotEmpty()) {\r\n                val bundle = Bundle()\r\n                bundle.putString(R.string.sessionId.toString(), it)\r\n                findNavController().navigate(\r\n                    R.id.action_mainPageFragment_to_movieListFragment,\r\n                    bundle\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun handleApiError(totalError: String?) {\r\n        showErrorView(true)\r\n        resources.getString(R.string.api_error_text).apply {\r\n            showErrorView(true, this)\r\n            this.toast(requireContext())\r\n        }\r\n        Log.d(TAG, \"subscribeOnTokenObserver:api $totalError\")\r\n    }\r\n    private fun handleNetError(message: String?) {\r\n        resources.getString(R.string.check_your_connection).apply {\r\n            showErrorView(true, this)\r\n            this.toast(requireContext())\r\n        }\r\n        Log.d(TAG, \"subscribeOnTokenObserver:net $message\")\r\n    }\r\n    private fun handleUnKnowError(message: String?) {\r\n        resources.getString(R.string.check_your_connection).apply {\r\n            showErrorView(true, this)\r\n            this.toast(requireContext())\r\n        }\r\n        Log.d(TAG, \"subscribeOnTokenObserver:unKnown $message\")\r\n    }\r\n\r\n    private fun animate() {\r\n        val valueAnimator0 = ValueAnimator.ofFloat(0f, -40f)\r\n        val valueAnimator1 = ValueAnimator.ofFloat(0f, 5 * 360f)\r\n        val valueAnimator2 = ValueAnimator.ofFloat(0f, 4 * 360f)\r\n        val valueAnimator3 = ValueAnimator.ofFloat(0f, 3 * 360f)\r\n        val valueAnimator4 = ValueAnimator.ofFloat(0f, 2 * 180f)\r\n        val valueAnimator5 = ValueAnimator.ofFloat(0f, 2 * 180f)\r\n        val valueAnimator6 = ValueAnimator.ofFloat(0f, 1 * 180f)\r\n        val valueAnimators = listOf<ValueAnimator>(valueAnimator1, valueAnimator2, valueAnimator3, valueAnimator4, valueAnimator5, valueAnimator6)\r\n        valueAnimator0.addUpdateListener {\r\n            val value = it.animatedValue as Float\r\n            animationButton.rotation = value\r\n        }\r\n        valueAnimator0.interpolator = LinearInterpolator()\r\n        valueAnimator0.duration = 1500L\r\n        valueAnimator1.addUpdateListener {\r\n            val value = it.animatedValue as Float\r\n            animationButton.rotation = value\r\n        }\r\n        valueAnimator2.addUpdateListener {\r\n            val value = it.animatedValue as Float\r\n            animationButton.rotation = value\r\n        }\r\n        valueAnimator3.addUpdateListener {\r\n            val value = it.animatedValue as Float\r\n            animationButton.rotation = value\r\n        }\r\n        valueAnimator4.addUpdateListener {\r\n            val value = it.animatedValue as Float\r\n            animationButton.rotation = value\r\n        }\r\n        valueAnimator5.addUpdateListener {\r\n            val value = it.animatedValue as Float\r\n            animationButton.rotation = value\r\n        }\r\n        valueAnimator6.addUpdateListener {\r\n            val value = it.animatedValue as Float\r\n            animationButton.rotation = value\r\n        }\r\n        for (i in valueAnimators) {\r\n            i.interpolator = LinearInterpolator()\r\n            i.duration = duration / 2\r\n        }\r\n        valueAnimator0.start()\r\n        valueAnimator0.doOnEnd {\r\n            valueAnimator6.start()\r\n            valueAnimator6.doOnEnd {\r\n                valueAnimator5.start()\r\n                valueAnimator5.doOnEnd {\r\n                    valueAnimator4.start()\r\n                    valueAnimator4.doOnEnd {\r\n                        valueAnimator3.start()\r\n                        valueAnimator3.doOnEnd {\r\n                            valueAnimator2.start()\r\n                            valueAnimator2.doOnEnd {\r\n                                valueAnimator1.doOnEnd {\r\n                                    valueAnimator6.start()\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showErrorView(show: Boolean, errorText: String? = null) {\r\n        rtl_mainPageF_layout.isVisible = show\r\n        btn_mainPageF_animation.isVisible = !show\r\n        errorText?.let {\r\n            txt_mainPageF_error.text = it\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nima/tmdb/ui/fragments/MainPageFragment.kt	(revision bf1252e4be94c59760e46dd59568b509cd1b4783)
+++ app/src/main/java/com/nima/tmdb/ui/fragments/MainPageFragment.kt	(date 1612980265671)
@@ -32,7 +32,7 @@
     lateinit var pref: SharedPreferences
 
     private val TAG: String = "MainPageFragment"
-    lateinit var animationButton : Button
+    lateinit var animationButton: Button
     var duration = 1000L
 
     private val viewModel: AuthenticationViewModel by viewModels()
@@ -140,6 +140,7 @@
         }
         Log.d(TAG, "subscribeOnTokenObserver:api $totalError")
     }
+
     private fun handleNetError(message: String?) {
         resources.getString(R.string.check_your_connection).apply {
             showErrorView(true, this)
@@ -147,6 +148,7 @@
         }
         Log.d(TAG, "subscribeOnTokenObserver:net $message")
     }
+
     private fun handleUnKnowError(message: String?) {
         resources.getString(R.string.check_your_connection).apply {
             showErrorView(true, this)
@@ -163,7 +165,14 @@
         val valueAnimator4 = ValueAnimator.ofFloat(0f, 2 * 180f)
         val valueAnimator5 = ValueAnimator.ofFloat(0f, 2 * 180f)
         val valueAnimator6 = ValueAnimator.ofFloat(0f, 1 * 180f)
-        val valueAnimators = listOf<ValueAnimator>(valueAnimator1, valueAnimator2, valueAnimator3, valueAnimator4, valueAnimator5, valueAnimator6)
+        val valueAnimators = listOf<ValueAnimator>(
+            valueAnimator1,
+            valueAnimator2,
+            valueAnimator3,
+            valueAnimator4,
+            valueAnimator5,
+            valueAnimator6
+        )
         valueAnimator0.addUpdateListener {
             val value = it.animatedValue as Float
             animationButton.rotation = value
